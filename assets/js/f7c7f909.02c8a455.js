"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[910],{4562:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"examples/py-get-historical-ticks","title":"Python example of how to download ticks data","description":"https://t.me/ctraderopenapi_support/8367","source":"@site/docs/06-examples/04-py-get-historical-ticks.mdx","sourceDirName":"06-examples","slug":"/examples/py-get-historical-ticks","permalink":"/ctoa/examples/py-get-historical-ticks","draft":false,"unlisted":false,"editUrl":"https://github.com/m-ahmadi/ctoa/blob/main/docs/06-examples/04-py-get-historical-ticks.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Python example of how to download time-series data","permalink":"/ctoa/examples/py-get-historical-candles"},"next":{"title":"Python example of how to subscribe for data","permalink":"/ctoa/examples/py-subscribe-to-live-data"}}');var r=n(4848),a=n(8453);const i={},s="Python example of how to download ticks data",c={},p=[];function d(e){const t={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"python-example-of-how-to-download-ticks-data",children:"Python example of how to download ticks data"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://t.me/ctrader_open_api_support/8367",children:"https://t.me/ctrader_open_api_support/8367"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:"import datetime as dt\nimport json\nimport os\nfrom ctrader_open_api import Client, Protobuf, TcpProtocol, EndPoints\nimport ctrader_open_api.messages.OpenApiMessages_pb2 as OA\nimport ctrader_open_api.messages.OpenApiModelMessages_pb2 as OAModel\nimport ctrader_open_api.messages.OpenApiCommonMessages_pb2 as OACommon\nimport ctrader_open_api.messages.OpenApiCommonModelMessages_pb2 as OAModelCommon\nfrom twisted.internet import reactor\nPROTO_OA_ERROR_RES_PAYLOAD_TYPE = OA.ProtoOAErrorRes().payloadType\n\n# connection, authentication and program lifecycle\ncredentials = json.load(open('credentials.json'))\nclient = Client(EndPoints.PROTOBUF_DEMO_HOST, EndPoints.PROTOBUF_PORT, TcpProtocol)\ndef onAccAuth(message):\n  if message.payloadType == PROTO_OA_ERROR_RES_PAYLOAD_TYPE:\n    print('account authentication failed', '\\n')\n    print(Protobuf.extract(message), '\\n')\n    return\n  print('account authenticated')\n  main()\ndef onAppAuth(message):\n  if message.payloadType == PROTO_OA_ERROR_RES_PAYLOAD_TYPE:\n    print('app authentication failed', '\\n')\n    print(Protobuf.extract(message), '\\n')\n    return\n  print('app authenticated')\n  req = OA.ProtoOAAccountAuthReq()\n  req.ctidTraderAccountId = credentials['accountId']\n  req.accessToken = credentials['accessToken']\n  deferred = client.send(req)\n  deferred.addCallbacks(onAccAuth, onError)\ndef onError(failure):\n  print('err: ', repr(failure.value))\ndef connected(client):\n  print('connected')\n  req = OA.ProtoOAApplicationAuthReq()\n  req.clientId = credentials['clientId']\n  req.clientSecret = credentials['clientSecret']\n  deferred = client.send(req, responseTimeoutInSeconds=20) # err if no response under 20 secs\n  deferred.addCallbacks(onAppAuth, onError)\ndef disconnected(client, reason):\n  print('disconnected: ', reason)\ndef onMsg(client, message):\n  ignores = [i.payloadType for i in [OACommon.ProtoHeartbeatEvent(), OA.ProtoOAAccountAuthRes(), OA.ProtoOAApplicationAuthRes()]]\n  if message.payloadType in ignores:\n    return\n  print('message received')\n\n\n# getting tick data\ndef onTickData(message):\n  response = Protobuf.extract(message)\n  if message.payloadType == OA.ProtoOAErrorRes().payloadType:\n    print('server sent error')\n    print(response)\n    return\n  if response.hasMore:\n    print('time range specified contains more ticks than allowed per request')\n  tickData = response.tickData\n  if not len(tickData):\n    print('there were no ticks in the date range you specified')\n\n  ticks = []\n  prev_timestamp = tickData[0].timestamp\n  prev_tick = tickData[0].tick\n  for i, v in enumerate(tickData):\n    timestamp = prev_timestamp + v.timestamp if i > 0 else v.timestamp\n    tick = prev_tick + v.tick if i > 0 else v.tick\n    tick_normalized = tick / 100_000\n    ticks.append(map(str, [timestamp, tick_normalized]))\n    prev_timestamp, prev_tick = timestamp, tick\n\n  print(ticks)\n\ndef main():\n  for file in ['ticks.bid.csv', 'ticks.ask.csv']:\n    if os.path.exists(file): os.remove(file)\n  sym_id = 41 # 'XAUUSD'\n\n  datetime_range = [(2025,1,2,18,30), (2025,1,2,18,45)]\n  frm, to = [dt.datetime(*i, tzinfo=dt.UTC).timestamp() for i in datetime_range]\n\n  if to - frm > dt.timedelta(weeks=1).total_seconds():\n    raise ValueError('cannot request tick data for a period larger than one week!')\n\n  req = OA.ProtoOAGetTickDataReq()\n  req.symbolId = sym_id\n  req.ctidTraderAccountId = credentials['accountId']\n  req.type = OAModel.ProtoOAQuoteType.BID # or it can be `OAModel.ProtoOAQuoteType.ASK`\n  req.fromTimestamp = int(frm * 1000)\n  req.toTimestamp = int(to * 1000)\n\n  deferred = client.send(req, responseTimeoutInSeconds=20)\n  deferred.addCallbacks(onTickData, onError)\n\nclient.setConnectedCallback(connected)\nclient.setDisconnectedCallback(disconnected)\nclient.setMessageReceivedCallback(onMsg)\nclient.startService()\nreactor.run()\n\n"})})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var o=n(6540);const r={},a=o.createContext(r);function i(e){const t=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);