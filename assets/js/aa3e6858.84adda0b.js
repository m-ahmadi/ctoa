"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[896],{2947:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"contacting-api/protobuf/index","title":"Protobuf","description":"So far we learned about the JSON format of messages that we were exchanging","source":"@site/docs/03-contacting-api/09-protobuf/index.mdx","sourceDirName":"03-contacting-api/09-protobuf","slug":"/contacting-api/protobuf/","permalink":"/ctoa/contacting-api/protobuf/","draft":false,"unlisted":false,"editUrl":"https://github.com/m-ahmadi/ctoa/blob/main/docs/03-contacting-api/09-protobuf/index.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Dictionary of All Messages","permalink":"/ctoa/contacting-api/dictionary-of-all-messages"},"next":{"title":"Compiler and Runtime","permalink":"/ctoa/contacting-api/protobuf/compiler-and-runtime"}}');var s=n(4848),r=n(8453);const a={},i="Protobuf",c={},d=[];function h(e){const t={code:"code",h1:"h1",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"protobuf",children:"Protobuf"})}),"\n",(0,s.jsxs)(t.p,{children:["So far we learned about the ",(0,s.jsx)(t.code,{children:"JSON"})," format of messages that we were exchanging\nwith the server. There is also another format that we can use, and that is\n",(0,s.jsx)(t.code,{children:"Protobuf"}),". One reason we started with ",(0,s.jsx)(t.code,{children:"JSON"})," format, was that it's a simpler\napproach, and therefore makes the code examples shorter, which in turn allows\nthe reader to focus more on the bigger picture being described. You might ask\nthen what's the point of using this other format. Let's start with a very basic\ncomparison table:"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Format"}),(0,s.jsx)(t.th,{children:"Size"}),(0,s.jsx)(t.th,{children:"Hassle of Using"}),(0,s.jsx)(t.th,{children:"When Makes Sense"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"JSON"})}),(0,s.jsx)(t.td,{children:"Large"}),(0,s.jsx)(t.td,{children:"Almost None"}),(0,s.jsx)(t.td,{children:"Small amount of users"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Protobuf"})}),(0,s.jsx)(t.td,{children:"Small"}),(0,s.jsx)(t.td,{children:"A Lot"}),(0,s.jsx)(t.td,{children:"Large amount of users"})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["The messages in ",(0,s.jsx)(t.code,{children:"Protobuf"})," format are much shorter in size compared to ",(0,s.jsx)(t.code,{children:"JSON"}),",\nand that results in less data being transmitted over the network. It might seem\nthat using the ",(0,s.jsx)(t.code,{children:"Protobuf"})," is the absolute better choice, but it's not that\nsimple. One can argue against the use of ",(0,s.jsx)(t.code,{children:"Protobuf"})," in some cases. Using\n",(0,s.jsx)(t.code,{children:"Protobuf"})," makes more sense when there are multiple clients connecting to the\nserver, and by more we mean thousands and thousands more. Usualy if your program\nhas less than a 1000 clients, the difference between trafic being saved is not\nworth the hassles of dealing with ",(0,s.jsx)(t.code,{children:"Protobuf"}),". We later see an example of\ncomparing the size of messages in these two strucures and a way to roughly\ncalculate the amount of traffic base on the ",(0,s.jsx)(t.code,{children:"RATE_LIMIT"})," concept."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"Protobuf"})," is a data interchange language developed by Google, and it has its\nown syntax for defining data structures and rules and relationship between them.\nThe contents in this langauge are written in files with a ",(0,s.jsx)(t.code,{children:".proto"})," extension. In\norder to use these files in a programming language, they must be compiled first,\nand to do that we need to install its compiler."]})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var o=n(6540);const s={},r=o.createContext(s);function a(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);