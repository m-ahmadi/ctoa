"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[4201],{69:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Basic Python examples of how to connect to server","title":"Basic Python examples of how to connect to server","description":"","source":"@site/docs/06-Basic Python examples of how to connect to server.mdx","sourceDirName":".","slug":"/Basic Python examples of how to connect to server","permalink":"/ctoa/Basic Python examples of how to connect to server","draft":false,"unlisted":false,"editUrl":"https://github.com/m-ahmadi/ctoa/blob/main/docs/06-Basic Python examples of how to connect to server.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Advanced","permalink":"/ctoa/historical-data/advanced"},"next":{"title":"Python example of connecting to server and placing an order","permalink":"/ctoa/Python example of connecting to server and placing an order"}}');var r=t(323),c=t(9523);const s={},a=void 0,i={},d=[];function p(e){const n={code:"code",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"\nfrom ctrader_open_api import Client, Protobuf, TcpProtocol, EndPoints\nimport ctrader_open_api.messages.OpenApiMessages_pb2 as OA\nimport ctrader_open_api.messages.OpenApiModelMessages_pb2 as OAModel\nimport ctrader_open_api.messages.OpenApiCommonMessages_pb2 as OACommon\nimport ctrader_open_api.messages.OpenApiCommonModelMessages_pb2 as OAModelCommon\nfrom twisted.internet import reactor\n\n# connection, authentication and program lifecycle\nimport json\n\ncredentials = json.load(open('credentials.json'))\nclient = Client(EndPoints.PROTOBUF_DEMO_HOST, EndPoints.PROTOBUF_PORT, TcpProtocol)\n\ndef main():\n  print('ready to do something')\n  reactor.stop()\n\ndef onAccAuth(message):\n  print('account authenticated')\n  main()\n\ndef onAppAuth(message):\n  print('app authenticated')\n  req = OA.ProtoOAAccountAuthReq()\n  req.ctidTraderAccountId = credentials['accountId']\n  req.accessToken = credentials['accessToken']\n  deferred = client.send(req)\n  deferred.addCallbacks(onAccAuth, onError)\n\ndef onError(failure):\n  print('err: ', repr(failure.value))\n\ndef connected(client):\n  print('connected')\n  req = OA.ProtoOAApplicationAuthReq()\n  req.clientId = credentials['clientId']\n  req.clientSecret = credentials['clientSecret']\n  deferred = client.send(req, responseTimeoutInSeconds=20) # err if no response under 20 secs\n  deferred.addCallbacks(onAppAuth, onError)\n\ndef disconnected(client, reason):\n  print('disconnected: ', reason)\n\ndef onMsg(client, message):\n  ignores = [i.payloadType for i in [OACommon.ProtoHeartbeatEvent(), OA.ProtoOAAccountAuthRes(), OA.ProtoOAApplicationAuthRes()]]\n  if message.payloadType in ignores:\n    return\n  print('message received')\n\nclient.setConnectedCallback(connected)\nclient.setDisconnectedCallback(disconnected)\nclient.setMessageReceivedCallback(onMsg)\nclient.startService()\nreactor.run()\n\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from ctrader_open_api import Client, Protobuf, TcpProtocol, EndPoints\nimport ctrader_open_api.messages.OpenApiMessages_pb2 as OA\nimport ctrader_open_api.messages.OpenApiModelMessages_pb2 as OAModel\nimport ctrader_open_api.messages.OpenApiCommonMessages_pb2 as OACommon\nimport ctrader_open_api.messages.OpenApiCommonModelMessages_pb2 as OAModelCommon\nfrom twisted.internet import reactor\n\n\n# connection, authentication and program lifecycle\nimport json\ncredentials = json.load(open('credentials.json'))\nclient = Client(EndPoints.PROTOBUF_DEMO_HOST, EndPoints.PROTOBUF_PORT, TcpProtocol)\ndef main():\n  print('ready to do something')\n  reactor.stop()\ndef onAccAuth(message):\n  print('account authenticated')\n  main()\ndef onAppAuth(message):\n  print('app authenticated')\n  req = OA.ProtoOAAccountAuthReq()\n  req.ctidTraderAccountId = credentials['accountId']\n  req.accessToken = credentials['accessToken']\n  deferred = client.send(req)\n  deferred.addCallbacks(onAccAuth, onError)\ndef onError(failure):\n  print('err: ', repr(failure.value))\ndef connected(client):\n  print('connected')\n  req = OA.ProtoOAApplicationAuthReq()\n  req.clientId = credentials['clientId']\n  req.clientSecret = credentials['clientSecret']\n  deferred = client.send(req, responseTimeoutInSeconds=20) # err if no response under 20 secs\n  deferred.addCallbacks(onAppAuth, onError)\ndef disconnected(client, reason):\n  print('disconnected: ', reason)\ndef onMsg(client, message):\n  ignores = [i.payloadType for i in [OACommon.ProtoHeartbeatEvent(), OA.ProtoOAAccountAuthRes(), OA.ProtoOAApplicationAuthRes()]]\n  if message.payloadType in ignores:\n    return\n  print('message received')\nclient.setConnectedCallback(connected)\nclient.setDisconnectedCallback(disconnected)\nclient.setMessageReceivedCallback(onMsg)\nclient.startService()\nreactor.run()\n\n"})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},9523:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(2531);const r={},c=o.createContext(r);function s(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);