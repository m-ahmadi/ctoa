"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[2161],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(6540);const o={},i=s.createContext(o);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},9639:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"examples/py-json-connect-getsyms-alt","title":"Basic Python example of how to connect to server (JSON, Alt Naming)","description":"This script does not use official package with Protobuf communication but rather","source":"@site/docs/06-examples/08-py-json-connect-getsyms-alt.mdx","sourceDirName":"06-examples","slug":"/examples/py-json-connect-getsyms-alt","permalink":"/ctoa/examples/py-json-connect-getsyms-alt","draft":false,"unlisted":false,"editUrl":"https://github.com/m-ahmadi/ctoa/blob/main/docs/06-examples/08-py-json-connect-getsyms-alt.mdx","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Basic Python example of how to connect to server (JSON)","permalink":"/ctoa/examples/py-json-connect-getsyms"},"next":{"title":"Python With JSON Communication and Custom WebSocket Class","permalink":"/ctoa/examples/py-json-altcode"}}');var o=t(4848),i=t(8453);const a={},c="Basic Python example of how to connect to server (JSON, Alt Naming)",r={},l=[{value:"How to get the JSON definition files.",id:"how-to-get-the-json-definition-files",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"basic-python-example-of-how-to-connect-to-server-json-alt-naming",children:"Basic Python example of how to connect to server (JSON, Alt Naming)"})}),"\n",(0,o.jsx)(n.p,{children:"This script does not use official package with Protobuf communication but rather\nuses JSON communication."}),"\n",(0,o.jsx)(n.p,{children:"Things to do before running the script:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"pip install websockets"})}),"\n",(0,o.jsxs)(n.li,{children:["put ",(0,o.jsx)(n.code,{children:"credentials.json"})," right beside the script"]}),"\n",(0,o.jsxs)(n.li,{children:["put ",(0,o.jsx)(n.code,{children:"OAModel.custom.json"})," and ",(0,o.jsx)(n.code,{children:"payloadTypes.custom.json"})," right beside the\nscript. (check ",(0,o.jsx)(n.a,{href:"#how-to-get-the-json-definition-files",children:"below"})," to see how to\ncreate them)"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import json\nimport asyncio as aio\nfrom types import SimpleNamespace\nfrom websockets.asyncio.client import connect # pip install websockets\n\n# utils\nparsejson = lambda s: json.loads(s, object_hook=lambda d: SimpleNamespace(**d))\ndef readfile(path):\n  with open(path) as f:\n    return parsejson(f.read())\n\ncreds = readfile('./credentials.json')\noa = readfile('./OAModel.json')\npt = readfile('./payloadTypes.json')\n\n\n# set up a function for constructing client messages\nuid_counter = 0\ndef construct_client_msg(payloadType, fields={}):\n  global uid_counter\n  uid_counter += 1\n  client_msg = {\n    'clientMsgId': f'cm_id_{uid_counter}',\n    'payloadType': payloadType,\n    'payload': {\n      'ctidTraderAccountId': creds.accountId,\n      'accessToken': creds.accessToken,\n      **fields\n    }\n  }\n  return json.dumps(client_msg)\n\n\nasync def main():\n  async with connect('wss://live.ctraderapi.com:5036') as ws:\n    print('Application authentication')\n    # we don't use the `construct_client_msg()` function for the first message,\n    # because its payload is different from the rest of the messages\n    client_msg = {\n      'clientMsgId': f'cm_id_{uid_counter}',\n      'payloadType': pt.req.ApplicationAuth,\n      'payload': {\n        'clientId': creds.clientId,\n        'clientSecret': creds.clientSecret\n      }\n    }\n    await ws.send(json.dumps(client_msg))\n    server_msg = parsejson(await ws.recv())\n    if server_msg.payloadType != pt.res.ApplicationAuth:\n      print('Application authentication failed')\n\n    print('Account authentication')\n    client_msg = construct_client_msg(pt.req.AccountAuth)\n    await ws.send(client_msg)\n    server_msg = parsejson(await ws.recv())\n    if server_msg.payloadType != pt.res.AccountAuth:\n      print('Account authentication failed')\n\n    print('Getting symbols list')\n    client_msg = construct_client_msg(pt.req.SymbolsList)\n    await ws.send(client_msg)\n    server_msg = parsejson(await ws.recv())\n    if server_msg.payloadType != pt.res.SymbolsList:\n      print('Getting symbols failed')\n\n    print('Saving symbol list to file')\n    symbols = [sym.__dict__ for sym in server_msg.payload.symbol]\n    with open('symbols.json', 'w', encoding='utf-8') as f:\n      json.dump(symbols, f, ensure_ascii=False, indent=2)\n\naio.run(main())\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"how-to-get-the-json-definition-files",children:"How to get the JSON definition files."}),"\n",(0,o.jsxs)(n.p,{children:["Run below snippet to create the ",(0,o.jsx)(n.code,{children:"OAModel.json"})," file. Before running the snippet\nyou need to have cTrader OpenAPI Python package installed:\n",(0,o.jsx)(n.code,{children:"pip install ctrader_open_api"})]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["When using ",(0,o.jsx)(n.code,{children:"JSON"})," communication, we don't need the ",(0,o.jsx)(n.code,{children:"ctrader_open_api"})," package\nanymore. We're only installing it to extract the neccessary information into the\n",(0,o.jsx)(n.code,{children:"OAModel.json"})," file and we no longer need it afterwards so we can uninstall it\nwith ",(0,o.jsx)(n.code,{children:"pip uninstall ctrader_open_api -y"})," after we ran the snippet."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import ctrader_open_api.messages.OpenApiModelMessages_pb2 as OAModel\nimport json\n\n# get OAModel in custom format\n# we're deleting \"PayloadType\" since we're getting it separately\ntarget_keys = filter(lambda i: i.startswith('ProtoOA'), dir(OAModel))\nones_with_keyval = filter(lambda k: hasattr(getattr(OAModel,k),'keys'), target_keys)\nout = {}\nfor key in ones_with_keyval:\n  prop = getattr(OAModel, key)\n  name = key.split('ProtoOA')[1]\n  out[name] = dict(zip(prop.keys(), prop.values()))\ndel out['PayloadType']\nwith open('OAModel.custom.json', 'w', encoding='utf-8') as f:\n  json.dump(out, f, ensure_ascii=False, indent=2)\n\n\n# get payloadTypes in custom format\nexcp = {'SLTP':'SLTP', 'PNL':'PnL'}\nout = {'req': {}, 'res': {}, 'event': {}}\nfor key, val in OAModel.ProtoOAPayloadType.items():\n  parts = key.split('PROTO_OA_')[1].split('_')\n  type = parts[-1].lower()\n  name = ''.join([excp[i] if i in excp else i.title() for i in parts[:-1]]) # PascalCase (proper)\n  # name = ''.join(map(str.title, parts[:-1]))  # PascalCase (naive)\n  # name = '_'.join(parts[:-1])                 # UPPER_SNAKE_CASE\n  # name = '_'.join(map(str.lower, parts[:-1])) # snake_case\n  out[type][name] = val\nout['common'] = {'Message': 5, 'ErrorRes': 50, 'HeartbeatEvent': 51}\nwith open('payloadTypes.custom.json', 'w', encoding='utf-8') as f:\n  json.dump(out, f, ensure_ascii=False, indent=2)\n\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);