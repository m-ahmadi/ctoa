"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[761],{5537:(e,n,s)=>{s.d(n,{A:()=>y});var r=s(6540),t=s(4164),a=s(5627),o=s(6347),c=s(372),i=s(604),l=s(1861),d=s(8749);function u(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:s}=e;return(0,r.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:s,default:r}})=>({value:e,label:n,attributes:s,default:r}))}(s);return function(e){const n=(0,l.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,s])}function g({value:e,tabValues:n}){return n.some(n=>n.value===e)}function p({queryString:e=!1,groupId:n}){const s=(0,o.W6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,i.aZ)(t),(0,r.useCallback)(e=>{if(!t)return;const n=new URLSearchParams(s.location.search);n.set(t,e),s.replace({...s.location,search:n.toString()})},[t,s])]}function m(e){const{defaultValue:n,queryString:s=!1,groupId:t}=e,a=h(e),[o,i]=(0,r.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!g({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const s=n.find(e=>e.default)??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:a})),[l,u]=p({queryString:s,groupId:t}),[m,f]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[s,t]=(0,d.Dv)(n);return[s,(0,r.useCallback)(e=>{n&&t.set(e)},[n,t])]}({groupId:t}),v=(()=>{const e=l??m;return g({value:e,tabValues:a})?e:null})();(0,c.A)(()=>{v&&i(v)},[v]);return{selectedValue:o,selectValue:(0,r.useCallback)(e=>{if(!g({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),f(e)},[u,f,a]),tabValues:a}}var f=s(9136);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=s(4848);function b({className:e,block:n,selectedValue:s,selectValue:r,tabValues:o}){const c=[],{blockElementScrollPositionUntilNextRender:i}=(0,a.a_)(),l=e=>{const n=e.currentTarget,t=c.indexOf(n),a=o[t].value;a!==s&&(i(n),r(a))},d=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const s=c.indexOf(e.currentTarget)+1;n=c[s]??c[0];break}case"ArrowLeft":{const s=c.indexOf(e.currentTarget)-1;n=c[s]??c[c.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},e),children:o.map(({value:e,label:n,attributes:r})=>(0,x.jsx)("li",{role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,ref:e=>{c.push(e)},onKeyDown:d,onClick:l,...r,className:(0,t.A)("tabs__item",v.tabItem,r?.className,{"tabs__item--active":s===e}),children:n??e},e))})}function j({lazy:e,children:n,selectedValue:s}){const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=a.find(e=>e.props.value===s);return e?(0,r.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:a.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s}))})}function w(e){const n=m(e);return(0,x.jsxs)("div",{className:(0,t.A)("tabs-container",v.tabList),children:[(0,x.jsx)(b,{...n,...e}),(0,x.jsx)(j,{...n,...e})]})}function y(e){const n=(0,f.A)();return(0,x.jsx)(w,{...e,children:u(e.children)},String(n))}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var r=s(6540);const t={},a=r.createContext(t);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(a.Provider,{value:n},e.children)}},8481:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"contacting-api/exchanging-messages","title":"Exchanging Messages","description":"Once we established a connection, we can send a","source":"@site/docs/02-contacting-api/03-exchanging-messages.mdx","sourceDirName":"02-contacting-api","slug":"/contacting-api/exchanging-messages","permalink":"/ctoa/contacting-api/exchanging-messages","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Establishing a Connection","permalink":"/ctoa/contacting-api/establishing-connection"},"next":{"title":"Keeping Connection Open","permalink":"/ctoa/contacting-api/keeping-connection-open"}}');var t=s(4848),a=s(8453),o=s(5537),c=s(9329);const i={},l="Exchanging Messages",d={},u=[{value:"Underlying Type of Messages",id:"underlying-type-of-messages",level:2},{value:"Structure of Messages",id:"structure-of-messages",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"exchanging-messages",children:"Exchanging Messages"})}),"\n",(0,t.jsxs)(n.p,{children:["Once we ",(0,t.jsx)(n.a,{href:"./establishing-connection",children:"established a connection"}),", we can send a\r\nmessage to the server. You might be wondering what we mean by a message and how\r\nare we going to send it."]}),"\n",(0,t.jsx)(n.p,{children:"In order to better understand the mechanism of sending messages, let's forget\r\nabout the cTrader OpenAPI server for the moment and connect to another server."}),"\n",(0,t.jsxs)(n.p,{children:["The endpoint that we're going to connect to is ",(0,t.jsx)(n.code,{children:"'wss://echo.websocket.org'"}),".\r\nThis is what's called an echo server, meaning, whatever message the client\r\nsends, it will send the exact same message back to the client."]}),"\n",(0,t.jsx)(n.p,{children:'Once the connection is open, we start sending the messages. Notice that we\'re\r\nnow "listening" for messages that server is sending back.'}),"\n",(0,t.jsxs)(o.A,{children:[(0,t.jsx)(c.A,{value:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const ws = new WebSocket('wss://echo.websocket.org');\r\nconst { log } = console;\r\n\r\nws.onopen = function () {\r\n  log('connected to server');\r\n\r\n  let msg = 'hello';\r\n  ws.send(msg);\r\n  log('client sent a message:', msg);\r\n\r\n  msg = 'hi';\r\n  ws.send(msg);\r\n  log('client sent a message:', msg);\r\n};\r\n\r\nws.onmessage = function (event) {\r\n  const serverMsg = event.data;\r\n  log(`server sent a message: ${serverMsg}`);\r\n};\n"})})}),(0,t.jsx)(c.A,{value:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python"})})})]}),"\n",(0,t.jsx)(n.p,{children:"Results from running the code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"connected to server\r\nclient sent a message: hello\r\nclient sent a message: hi\r\nserver sent a message: hello\r\nserver sent a message: hi\n"})}),"\n",(0,t.jsx)(n.h2,{id:"underlying-type-of-messages",children:"Underlying Type of Messages"}),"\n",(0,t.jsx)(n.p,{children:"Let's focus for a moment to the type of messages that are being exchanged, i.e.\r\nthe messages sent by client to server or vice-verca."}),"\n",(0,t.jsx)(n.p,{children:"Let's only change some parts of previous code example and run it again."}),"\n",(0,t.jsxs)(o.A,{children:[(0,t.jsx)(c.A,{value:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"ws.onopen = function () {\r\n  console.log('connected to server');\r\n  ws.send('hello');\r\n  ws.send(2573);\r\n  ws.send(true);\r\n};\r\n\r\nws.onmessage = function (event) {\r\n  const serverMsg = event.data;\r\n  const msgType = typeof serverMsg;\r\n  console.log(`server sent a message: ${serverMsg} (${msgType})`);\r\n};\n"})})}),(0,t.jsx)(c.A,{value:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python"})})})]}),"\n",(0,t.jsx)(n.p,{children:"Results from running the code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"connected to server\r\nserver sent a message: hello (string)\r\nserver sent a message: 2573 (string)\r\nserver sent a message: true (string)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As you see, even when we're sending a message with the type of ",(0,t.jsx)(n.code,{children:"number"})," or\r\n",(0,t.jsx)(n.code,{children:"int"}),", what the server sends back is always ",(0,t.jsx)(n.code,{children:"string"})," or ",(0,t.jsx)(n.code,{children:"str"}),". This is\r\nnotewortyh because it demonstrates that messages being exchanged between client\r\nand server are (usually) strings. Techincally, there are\r\n",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#data",children:"other types of messages"}),"\r\nthat can be transmitted over the network, but in our case of cTrader OpenAPI\r\nserver, we deal only with strings."]}),"\n",(0,t.jsx)(n.h2,{id:"structure-of-messages",children:"Structure of Messages"}),"\n",(0,t.jsxs)(n.p,{children:["So far, we established what a message is, and how to send one. Now let's shift\r\nour focus back to the cTrader OpenAPI server and go back to the\r\n",(0,t.jsx)(n.a,{href:"./endpoints#an-example",children:"endpoint"})," we were using\r\n",(0,t.jsx)(n.a,{href:"./establishing-connection",children:"earlier"}),", and let's listen again for incomeing\r\nserver messages."]}),"\n",(0,t.jsx)(n.p,{children:"Now let's send our first message to the cTrader OpenAPI server."}),"\n",(0,t.jsxs)(o.A,{children:[(0,t.jsx)(c.A,{value:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const ws = new WebSocket('wss://live.ctraderapi.com:5036');\r\nconst { log } = console;\r\n\r\nws.onopen = function () {\r\n  log('connected to server');\r\n  ws.send('hello');\r\n};\r\n\r\nws.onmessage = function (event) {\r\n  const serverMsg = event.data;\r\n  log(`server sent a message: ${serverMsg}`);\r\n};\r\n\r\nws.onclose = function () {\r\n  log('connection closed');\r\n};\n"})})}),(0,t.jsx)(c.A,{value:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python"})})})]}),"\n",(0,t.jsx)(n.p,{children:"Results:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'connected to server\r\nserver sent a message: {"payloadType":2142,"payload":{"errorCode":\r\n                       "INVALID_REQUEST","description":"Malformed JSON message\r\n                       at 1:6"}}\r\nconnection closed\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can see that server did respond to our message, but it sent a long text that\r\nseems to have a structure. That structure is ",(0,t.jsx)(n.code,{children:"JSON"}),". When we want to send a\r\nmessage to the server, we cannot just send any string of text like ",(0,t.jsx)(n.code,{children:"'hello'"}),".\r\nOur messages must have a structure to them."]}),"\n",(0,t.jsxs)(n.p,{children:["The server supports two different structures, one is ",(0,t.jsx)(n.code,{children:"JSON"}),", and the other is\r\n",(0,t.jsx)(n.code,{children:"Protobuf"}),". Here are some of their differences:"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"MESSAGING_TYPE"}),(0,t.jsx)(n.th,{children:"HHH"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"JSON"})}),(0,t.jsx)(n.td,{children:"placeholder"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Protobuf"})}),(0,t.jsx)(n.td,{children:"placeholder"})]})]})]})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},9329:(e,n,s)=>{s.d(n,{A:()=>o});s(6540);var r=s(4164);const t={tabItem:"tabItem_Ymn6"};var a=s(4848);function o({children:e,hidden:n,className:s}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(t.tabItem,s),hidden:n,children:e})}}}]);