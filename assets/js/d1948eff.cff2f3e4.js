"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[968],{7567:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"JavaScript example of how to connect to server and place an order","title":"JavaScript example of how to connect to server and place an order","description":"How to setup environment","source":"@site/docs/14-JavaScript example of how to connect to server and place an order.mdx","sourceDirName":".","slug":"/JavaScript example of how to connect to server and place an order","permalink":"/ctoa/JavaScript example of how to connect to server and place an order","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":14,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Extracting all the information regarding trade history","permalink":"/ctoa/Extracting all the information regarding trade history"},"next":{"title":"Why live trendbar has no closeprice","permalink":"/ctoa/Why live trendbar has no closeprice"}}');var t=r(4848),a=r(8453);const s={},i=void 0,c={},l=[{value:"How to setup environment",id:"how-to-setup-environment",level:2}];function d(e){const n={code:"code",h2:"h2",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"var credentials = require('./credentials.json');\r\nvar payloadTypes = require('./payloadTypes.json');\r\nvar OAModel = require('./OAModel.json');\r\nvar fs = require('fs');\r\nPROTO_HEARTBEAT_EVENT_PAYLOADTYPE = 51;\r\nuid = (\r\n  (i) => () =>\r\n    'cm_id_' + i++\r\n)(1);\r\n\r\n// put two frequently needed credentials into variables\r\nvar { accountId: ctidTraderAccountId, accessToken } = credentials;\r\n\r\n// initialize websocket\r\nvar ws = new WebSocket('wss://live.ctraderapi.com:5036'); // or 'demo.ctraderapi.com:5036'\r\n\r\n// main function which is called after successful authentication\r\nfunction main() {\r\n  console.log('ready to do something');\r\n\r\n  // request symbols list\r\n  var clientMsg = {\r\n    clientMsgId: uid(),\r\n    payloadType: payloadTypes.PROTO_OA_SYMBOLS_LIST_REQ,\r\n    payload: {\r\n      ctidTraderAccountId,\r\n      accessToken,\r\n      includeArchivedSymbols: false,\r\n    },\r\n  };\r\n  ws.send(JSON.stringify(clientMsg));\r\n\r\n  // place order\r\n  var clientMsg = {\r\n    clientMsgId: uid(),\r\n    payloadType: payloadTypes.PROTO_OA_NEW_ORDER_REQ,\r\n    payload: {\r\n      ctidTraderAccountId,\r\n      accessToken,\r\n      orderType: OAModel.ProtoOAOrderType.LIMIT,\r\n      tradeSide: OAModel.ProtoOATradeSide.BUY,\r\n      symbolId: 41, // XAUUSD\r\n      limitPrice: 2700.34,\r\n      volume: 100, // equals 0.01 lot\r\n      stopLoss: 2600.34,\r\n      takeProfit: 2750.34,\r\n    },\r\n  };\r\n  ws.send(JSON.stringify(clientMsg));\r\n}\r\n\r\n// main callback\r\nfunction onResp(message) {\r\n  var { payloadType, payload } = message;\r\n\r\n  if (payloadType === payloadTypes.PROTO_OA_SYMBOLS_LIST_RES) {\r\n    var syms = payload.symbol;\r\n    fs.writeFileSync('syms.json', JSON.stringify(syms, null, 2));\r\n    console.log('got the symbol list and saved it as syms.json');\r\n  }\r\n\r\n  if (payloadType === payloadTypes.PROTO_OA_EXECUTION_EVENT) {\r\n    console.log('placed order successfully');\r\n    console.log('order id:', payload.order.orderId);\r\n  }\r\n}\r\n\r\n// setting up event listeners for the WebSocket instance\r\n\r\nws.onopen = function (e) {\r\n  console.log('connected');\r\n\r\n  // first thing after connecting is to request for app auth\r\n  var clientMsg = {\r\n    clientMsgId: uid(),\r\n    payloadType: payloadTypes.PROTO_OA_APPLICATION_AUTH_REQ,\r\n    payload: {\r\n      clientId: credentials.clientId,\r\n      clientSecret: credentials.clientSecret,\r\n    },\r\n  };\r\n  ws.send(JSON.stringify(clientMsg));\r\n};\r\n\r\nws.onmessage = function (e) {\r\n  var serverMsg = JSON.parse(e.data);\r\n  var { payloadType } = serverMsg;\r\n\r\n  // apply custom logic on special server messages (i.e. auth results, errors, heartbeat events)\r\n\r\n  if (payloadType === payloadTypes.PROTO_OA_APPLICATION_AUTH_RES) {\r\n    console.log('app auth done');\r\n    // now must request for account auth\r\n    var clientMsg = {\r\n      clientMsgId: uid(),\r\n      payloadType: payloadTypes.PROTO_OA_ACCOUNT_AUTH_REQ,\r\n      payload: { ctidTraderAccountId, accessToken },\r\n    };\r\n    ws.send(JSON.stringify(clientMsg));\r\n    return;\r\n  }\r\n\r\n  if (payloadType === payloadTypes.PROTO_OA_ACCOUNT_AUTH_RES) {\r\n    console.log('account auth done');\r\n    // now everything is ready to do something\r\n    main();\r\n    return;\r\n  }\r\n\r\n  if (payloadType === payloadTypes.PROTO_OA_ERROR_RES) {\r\n    console.log('server sent error message', serverMsg.payload);\r\n    return;\r\n  }\r\n\r\n  if (payloadType === PROTO_HEARTBEAT_EVENT_PAYLOADTYPE) {\r\n    console.log('heartbeat event');\r\n    return;\r\n  }\r\n\r\n  // direct any other server messages to some other function\r\n  onResp(serverMsg);\r\n};\r\n\r\nws.onerror = function (e) {\r\n  console.log('websocket error', e);\r\n};\r\n\r\nws.onclose = function (e) {\r\n  console.log('disconnected', e.code, e.reason, e.wasClean);\r\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"how-to-setup-environment",children:"How to setup environment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import ctrader_open_api.messages.OpenApiModelMessages_pb2 as OAModel\r\nimport json\r\n\r\n# get payloadTypes\r\ntarget_keys = filter(lambda i: i.startswith('PROTO_OA_'), dir(OAModel))\r\nout = dict(map(lambda k: [k, getattr(OAModel, k)], target_keys))\r\nwith open('payloadTypes.json', 'w', encoding='utf-8') as f:\r\n  json.dump(out, f, ensure_ascii=False, indent=2)\r\n\r\n# get OAModel stuff\r\ntarget_keys = filter(lambda i: i.startswith('ProtoOA'), dir(OAModel))\r\nones_with_keyval = filter(lambda k: hasattr(getattr(OAModel,k),'keys'), target_keys)\r\nout = {}\r\nfor key in ones_with_keyval:\r\n  prop = getattr(OAModel, key)\r\n  out[key] = dict(zip(prop.keys(), prop.values()))\r\nwith open('OAModel.json', 'w', encoding='utf-8') as f:\r\n  json.dump(out, f, ensure_ascii=False, indent=2)\r\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var o=r(6540);const t={},a=o.createContext(t);function s(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);