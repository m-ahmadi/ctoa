"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[213],{7555:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"Python example of how to download time-series data","title":"Python example of how to download time-series data","description":"Basic","source":"@site/docs/08-Python example of how to download time-series data.mdx","sourceDirName":".","slug":"/Python example of how to download time-series data","permalink":"/ctoa/Python example of how to download time-series data","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Python example of connecting to server and placing an order","permalink":"/ctoa/Python example of connecting to server and placing an order"},"next":{"title":"Python example of how to download ticks data","permalink":"/ctoa/Python example of how to download ticks data"}}');var o=t(4848),a=t(8453);const s={},i=void 0,d={},c=[{value:"Basic",id:"basic",level:2},{value:"Beginner-level multi-requesting",id:"beginner-level-multi-requesting",level:2}];function l(e){const r={code:"code",h2:"h2",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"basic",children:"Basic"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:"import datetime as dt\r\nimport json\r\nimport pandas as pd\r\nfrom ctrader_open_api import Client, Protobuf, TcpProtocol, EndPoints\r\nimport ctrader_open_api.messages.OpenApiMessages_pb2 as OA\r\nimport ctrader_open_api.messages.OpenApiModelMessages_pb2 as OAModel\r\nimport ctrader_open_api.messages.OpenApiCommonMessages_pb2 as OACommon\r\nimport ctrader_open_api.messages.OpenApiCommonModelMessages_pb2 as OAModelCommon\r\nfrom twisted.internet import reactor\r\nPROTO_OA_ERROR_RES_PAYLOAD_TYPE = OA.ProtoOAErrorRes().payloadType\r\n\r\n# connection, authentication and program lifecycle\r\ncredentials = json.load(open('credentials.json'))\r\nclient = Client(EndPoints.PROTOBUF_DEMO_HOST, EndPoints.PROTOBUF_PORT, TcpProtocol)\r\ndef onAccAuth(message):\r\n\tif message.payloadType == PROTO_OA_ERROR_RES_PAYLOAD_TYPE:\r\n\t\tprint('account authentication failed', '\\n')\r\n\t\tprint(Protobuf.extract(message), '\\n')\r\n\t\treturn\r\n\tprint('account authenticated')\r\n\tmain()\r\ndef onAppAuth(message):\r\n\tif message.payloadType == PROTO_OA_ERROR_RES_PAYLOAD_TYPE:\r\n\t\tprint('app authentication failed', '\\n')\r\n\t\tprint(Protobuf.extract(message), '\\n')\r\n\t\treturn\r\n\tprint('app authenticated')\r\n\treq = OA.ProtoOAAccountAuthReq()\r\n\treq.ctidTraderAccountId = credentials['accountId']\r\n\treq.accessToken = credentials['accessToken']\r\n\tdeferred = client.send(req)\r\n\tdeferred.addCallbacks(onAccAuth, onError)\r\ndef onError(failure):\r\n\tprint('err: ', repr(failure.value))\r\ndef connected(client):\r\n\tprint('connected')\r\n\treq = OA.ProtoOAApplicationAuthReq()\r\n\treq.clientId = credentials['clientId']\r\n\treq.clientSecret = credentials['clientSecret']\r\n\tdeferred = client.send(req, responseTimeoutInSeconds=20) # err if no response under 20 secs\r\n\tdeferred.addCallbacks(onAppAuth, onError)\r\ndef disconnected(client, reason):\r\n\tprint('disconnected: ', reason)\r\ndef onMsg(client, message):\r\n\tignores = [i.payloadType for i in [OACommon.ProtoHeartbeatEvent(), OA.ProtoOAAccountAuthRes(), OA.ProtoOAApplicationAuthRes()]]\r\n\tif message.payloadType in ignores:\r\n\t\treturn\r\n\tprint('message received')\r\n\r\n# get historical daily bars\r\ndef onTrendbar(message):\r\n\tresponse = Protobuf.extract(message)\r\n\tif message.payloadType == OA.ProtoOAErrorRes().payloadType:\r\n\t\tprint(response)\r\n\t\treturn\r\n\tbars = []\r\n\tfor bar in response.trendbar:\r\n\t\ttimestamp = bar.utcTimestampInMinutes * 60 # seconds\r\n\t\topen = (bar.low + bar.deltaOpen) / 100000.0\r\n\t\thigh = (bar.low + bar.deltaHigh) / 100000.0\r\n\t\tlow = bar.low / 100000.0\r\n\t\tclose = (bar.low + bar.deltaClose) / 100000.0\r\n\t\tbars.append([timestamp, open, high, low, close, bar.volume])\r\n\tpd.DataFrame(bars, columns=['timestamp','open','high','low','close','volume']).to_csv('bars.csv', index=False)\r\n\tbars_df = pd.read_csv('bars.csv', index_col='timestamp')\r\n\tbars_df.index = pd.to_datetime(bars_df.index, unit='s', utc=True) # optional\r\ndef main():\r\n\treq = OA.ProtoOAGetTrendbarsReq()\r\n\treq.symbolId = 41 # 'XAUUSD'\r\n\treq.ctidTraderAccountId = credentials['accountId']\r\n\treq.period = OAModel.ProtoOATrendbarPeriod.D1\r\n\treq.fromTimestamp = int(dt.datetime(2025,1,1, tzinfo=dt.UTC).timestamp()) * 1000\r\n\treq.toTimestamp = int(dt.datetime(2025,1,23, tzinfo=dt.UTC).timestamp()) * 1000\r\n\tdeferred = client.send(req)\r\n\tdeferred.addCallbacks(onTrendbar, onError)\r\n\r\nclient.setConnectedCallback(connected)\r\nclient.setDisconnectedCallback(disconnected)\r\nclient.setMessageReceivedCallback(onMsg)\r\nclient.startService()\r\nreactor.run()\r\n\n"})}),"\n",(0,o.jsx)(r.h2,{id:"beginner-level-multi-requesting",children:"Beginner-level multi-requesting"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:"# get full timeseries data\r\nimport datetime as dt\r\nimport json\r\nimport os\r\nfrom timeit import default_timer as timer\r\nimport pandas as pd\r\nCHUNK_SIZE = {'days': 1} # span covered in 1 request\r\nTHRESHOLD_OF_EMPTY_RESPONSES = 60 # cutoff logic\r\noutfile = 'bars.raw.csv'\r\nstatefile = 'last_fromTimestamp.txt'\r\ncols = ['utcTimestampInMinutes','low','deltaOpen','deltaClose','deltaHigh','volume']\r\nrequest_timer = 0 # for measuring time taken by requests\r\nempty_resp_counter = 0 # for counting sequantial empty responses\r\ndef main():\r\n  sym_id = 41 # 'XAUUSD'\r\n  start, end = None, None\r\n  if os.path.exists(statefile):\r\n    with open(statefile) as f:\r\n      last_saved_fromTimestamp = f.read()\r\n    last_fromDatetime = dt.datetime.fromtimestamp(int(last_saved_fromTimestamp)/1000)\r\n    # date range must not be redundant between runs (otherwise creates duplicates in outfile)\r\n    start = last_fromDatetime - dt.timedelta(**CHUNK_SIZE)\r\n    end = last_fromDatetime\r\n  else:\r\n    now = dt.datetime.now(tz=dt.UTC)\r\n    today_midnight = now.replace(hour=0, minute=0, second=0, microsecond=0)\r\n    start = today_midnight - dt.timedelta(**CHUNK_SIZE)\r\n    end = today_midnight\r\n  fr, to = [int(i.timestamp()*1000) for i in [start, end]]\r\n  reqBars(sym_id, fr, to)\r\n  print('FROM:                           TO:                             SECS_TOOK:      BARS:')\r\n\r\ndef reqBars(sym_id, fr, to):\r\n  req = OA.ProtoOAGetTrendbarsReq()\r\n  req.symbolId = sym_id\r\n  req.ctidTraderAccountId = credentials['accountId']\r\n  req.period = OAModel.ProtoOATrendbarPeriod.M1\r\n  req.fromTimestamp = fr\r\n  req.toTimestamp = to\r\n  deferred = client.send(req, responseTimeoutInSeconds=20)\r\n  deferred.addCallbacks(onTrendbar, onError, [fr, to])\r\n  global request_timer\r\n  request_timer = timer()\r\n\r\ndef onTrendbar(message, begin, end):\r\n  response = Protobuf.extract(message)\r\n  # print some stuff about the chunk\r\n  global request_timer\r\n  chunk_info = [\r\n    *[dt.datetime.fromtimestamp(i/1000) for i in [begin,end]],\r\n    round((timer()-request_timer)),\r\n    len(response.trendbar),\r\n  ]\r\n  print('\\t\\t'.join(map(str,chunk_info)))\r\n  if message.payloadType == OA.ProtoOAErrorRes().payloadType:\r\n    print('server sent error')\r\n  # process chunk response\r\n  if len(response.trendbar) > 0:\r\n    chunk_bars = [[str(getattr(i,k)) for k in cols] for i in response.trendbar]\r\n    chunk_str = '\\n'.join([','.join(i) for i in chunk_bars]) + '\\n'\r\n    with open(outfile, 'a', newline='') as f: f.write(chunk_str)\r\n  # update state file\r\n  with open(statefile, 'w') as f: f.write(str(begin))\r\n  # count up empty server responses (used to detect when reached end of data)\r\n  global empty_resp_counter\r\n  empty_resp_counter = 0 if len(response.trendbar) > 0 else (empty_resp_counter + 1)\r\n  # assume we reached end of data if last n requests had no data\r\n  if empty_resp_counter > THRESHOLD_OF_EMPTY_RESPONSES:\r\n    df = pd.read_csv(outfile, names=cols)\r\n    df2 = pd.DataFrame()\r\n    df2['timestamp'] = df['utcTimestampInMinutes'] * 60\r\n    df2['open'] = (df['low'] + df['deltaOpen']) / 100_000\r\n    df2['high'] = (df['low'] + df['deltaHigh']) / 100_000\r\n    df2['low'] = df['low'] / 100_000\r\n    df2['close'] = (df['low'] + df['deltaClose']) / 100_000\r\n    df2['volume'] = df['volume']\r\n    df2.sort_values(by='timestamp', ascending=True, inplace=True)\r\n    df2.to_csv('bars.csv', index=False)\r\n    print('all done. shutting down...')\r\n    reactor.stop()\r\n    return\r\n  # request next chunk\r\n  prev_frm = dt.datetime.fromtimestamp(begin / 1000)\r\n  new_frm = prev_frm - dt.timedelta(**CHUNK_SIZE)\r\n  fr, to = [int(i.timestamp()*1000) for i in [new_frm, prev_frm]]\r\n  reqBars(response.symbolId, fr, to)\r\n\n"})})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>i});var n=t(6540);const o={},a=n.createContext(o);function s(e){const r=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);