"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[913],{2601:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Python example of how to download ticks data","title":"Python example of how to download ticks data","description":"","source":"@site/docs/09-Python example of how to download ticks data.mdx","sourceDirName":".","slug":"/Python example of how to download ticks data","permalink":"/ctoa/Python example of how to download ticks data","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Python example of how to download time-series data","permalink":"/ctoa/Python example of how to download time-series data"},"next":{"title":"Basic websocket example in JavaScript","permalink":"/ctoa/Basic websocket example in JavaScript"}}');var o=n(4848),a=n(8453);const i={},s=void 0,c={},d=[];function p(e){const t={code:"code",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"import datetime as dt\r\nimport json\r\nimport os\r\nfrom ctrader_open_api import Client, Protobuf, TcpProtocol, EndPoints\r\nimport ctrader_open_api.messages.OpenApiMessages_pb2 as OA\r\nimport ctrader_open_api.messages.OpenApiModelMessages_pb2 as OAModel\r\nimport ctrader_open_api.messages.OpenApiCommonMessages_pb2 as OACommon\r\nimport ctrader_open_api.messages.OpenApiCommonModelMessages_pb2 as OAModelCommon\r\nfrom twisted.internet import reactor\r\nPROTO_OA_ERROR_RES_PAYLOAD_TYPE = OA.ProtoOAErrorRes().payloadType\r\n\r\n# connection, authentication and program lifecycle\r\ncredentials = json.load(open('credentials.json'))\r\nclient = Client(EndPoints.PROTOBUF_DEMO_HOST, EndPoints.PROTOBUF_PORT, TcpProtocol)\r\ndef onAccAuth(message):\r\n\tif message.payloadType == PROTO_OA_ERROR_RES_PAYLOAD_TYPE:\r\n\t\tprint('account authentication failed', '\\n')\r\n\t\tprint(Protobuf.extract(message), '\\n')\r\n\t\treturn\r\n\tprint('account authenticated')\r\n\tmain()\r\ndef onAppAuth(message):\r\n\tif message.payloadType == PROTO_OA_ERROR_RES_PAYLOAD_TYPE:\r\n\t\tprint('app authentication failed', '\\n')\r\n\t\tprint(Protobuf.extract(message), '\\n')\r\n\t\treturn\r\n\tprint('app authenticated')\r\n\treq = OA.ProtoOAAccountAuthReq()\r\n\treq.ctidTraderAccountId = credentials['accountId']\r\n\treq.accessToken = credentials['accessToken']\r\n\tdeferred = client.send(req)\r\n\tdeferred.addCallbacks(onAccAuth, onError)\r\ndef onError(failure):\r\n\tprint('err: ', repr(failure.value))\r\ndef connected(client):\r\n\tprint('connected')\r\n\treq = OA.ProtoOAApplicationAuthReq()\r\n\treq.clientId = credentials['clientId']\r\n\treq.clientSecret = credentials['clientSecret']\r\n\tdeferred = client.send(req, responseTimeoutInSeconds=20) # err if no response under 20 secs\r\n\tdeferred.addCallbacks(onAppAuth, onError)\r\ndef disconnected(client, reason):\r\n\tprint('disconnected: ', reason)\r\ndef onMsg(client, message):\r\n\tignores = [i.payloadType for i in [OACommon.ProtoHeartbeatEvent(), OA.ProtoOAAccountAuthRes(), OA.ProtoOAApplicationAuthRes()]]\r\n\tif message.payloadType in ignores:\r\n\t\treturn\r\n\tprint('message received')\r\n\r\n\r\n# getting tick data\r\ndef onTickData(message):\r\n\tresponse = Protobuf.extract(message)\r\n\tif message.payloadType == OA.ProtoOAErrorRes().payloadType:\r\n\t\tprint('server sent error')\r\n\t\tprint(response)\r\n\t\treturn\r\n\tif response.hasMore:\r\n\t\tprint('time range specified contains more ticks than allowed per request')\r\n\ttickData = response.tickData\r\n\tif not len(tickData):\r\n\t\tprint('there were no ticks in the date range you specified')\r\n\r\n\tticks = []\r\n\tprev_timestamp = tickData[0].timestamp\r\n\tprev_tick = tickData[0].tick\r\n\tfor i, v in enumerate(tickData):\r\n\t\ttimestamp = prev_timestamp + v.timestamp if i > 0 else v.timestamp\r\n\t\ttick = prev_tick + v.tick if i > 0 else v.tick\r\n\t\ttick_normalized = tick / 100_000\r\n\t\tticks.append(map(str, [timestamp, tick_normalized]))\r\n\t\tprev_timestamp, prev_tick = timestamp, tick\r\n\r\n\tprint(ticks)\r\n\r\ndef main():\r\n\tfor file in ['ticks.bid.csv', 'ticks.ask.csv']:\r\n\t\tif os.path.exists(file): os.remove(file)\r\n\tsym_id = 41 # 'XAUUSD'\r\n\r\n\tdatetime_range = [(2025,1,2,18,30), (2025,1,2,18,45)]\r\n\tfrm, to = [dt.datetime(*i, tzinfo=dt.UTC).timestamp() for i in datetime_range]\r\n\r\n\tif to - frm > dt.timedelta(weeks=1).total_seconds():\r\n\t\traise ValueError('cannot request tick data for a period larger than one week!')\r\n\r\n\treq = OA.ProtoOAGetTickDataReq()\r\n\treq.symbolId = sym_id\r\n\treq.ctidTraderAccountId = credentials['accountId']\r\n\treq.type = OAModel.ProtoOAQuoteType.BID # or it can be `OAModel.ProtoOAQuoteType.ASK`\r\n\treq.fromTimestamp = int(frm * 1000)\r\n\treq.toTimestamp = int(to * 1000)\r\n\r\n\tdeferred = client.send(req, responseTimeoutInSeconds=20)\r\n\tdeferred.addCallbacks(onTickData, onError)\r\n\r\nclient.setConnectedCallback(connected)\r\nclient.setDisconnectedCallback(disconnected)\r\nclient.setMessageReceivedCallback(onMsg)\r\nclient.startService()\r\nreactor.run()\r\n\n"})})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var r=n(6540);const o={},a=r.createContext(o);function i(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);