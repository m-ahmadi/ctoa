"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[201],{4430:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Basic Python examples of how to connect to server","title":"Basic Python examples of how to connect to server","description":"","source":"@site/docs/06-Basic Python examples of how to connect to server.mdx","sourceDirName":".","slug":"/Basic Python examples of how to connect to server","permalink":"/ctoa/Basic Python examples of how to connect to server","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Advanced","permalink":"/ctoa/historical-data/advanced"},"next":{"title":"Python example of connecting to server and placing an order","permalink":"/ctoa/Python example of connecting to server and placing an order"}}');var o=r(4848),c=r(8453);const s={},a=void 0,i={},d=[];function p(e){const n={code:"code",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"\r\nfrom ctrader_open_api import Client, Protobuf, TcpProtocol, EndPoints\r\nimport ctrader_open_api.messages.OpenApiMessages_pb2 as OA\r\nimport ctrader_open_api.messages.OpenApiModelMessages_pb2 as OAModel\r\nimport ctrader_open_api.messages.OpenApiCommonMessages_pb2 as OACommon\r\nimport ctrader_open_api.messages.OpenApiCommonModelMessages_pb2 as OAModelCommon\r\nfrom twisted.internet import reactor\r\n\r\n# connection, authentication and program lifecycle\r\nimport json\r\n\r\ncredentials = json.load(open('credentials.json'))\r\nclient = Client(EndPoints.PROTOBUF_DEMO_HOST, EndPoints.PROTOBUF_PORT, TcpProtocol)\r\n\r\ndef main():\r\n  print('ready to do something')\r\n  reactor.stop()\r\n\r\ndef onAccAuth(message):\r\n  print('account authenticated')\r\n  main()\r\n\r\ndef onAppAuth(message):\r\n  print('app authenticated')\r\n  req = OA.ProtoOAAccountAuthReq()\r\n  req.ctidTraderAccountId = credentials['accountId']\r\n  req.accessToken = credentials['accessToken']\r\n  deferred = client.send(req)\r\n  deferred.addCallbacks(onAccAuth, onError)\r\n\r\ndef onError(failure):\r\n  print('err: ', repr(failure.value))\r\n\r\ndef connected(client):\r\n  print('connected')\r\n  req = OA.ProtoOAApplicationAuthReq()\r\n  req.clientId = credentials['clientId']\r\n  req.clientSecret = credentials['clientSecret']\r\n  deferred = client.send(req, responseTimeoutInSeconds=20) # err if no response under 20 secs\r\n  deferred.addCallbacks(onAppAuth, onError)\r\n\r\ndef disconnected(client, reason):\r\n  print('disconnected: ', reason)\r\n\r\ndef onMsg(client, message):\r\n  ignores = [i.payloadType for i in [OACommon.ProtoHeartbeatEvent(), OA.ProtoOAAccountAuthRes(), OA.ProtoOAApplicationAuthRes()]]\r\n  if message.payloadType in ignores:\r\n    return\r\n  print('message received')\r\n\r\nclient.setConnectedCallback(connected)\r\nclient.setDisconnectedCallback(disconnected)\r\nclient.setMessageReceivedCallback(onMsg)\r\nclient.startService()\r\nreactor.run()\r\n\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from ctrader_open_api import Client, Protobuf, TcpProtocol, EndPoints\r\nimport ctrader_open_api.messages.OpenApiMessages_pb2 as OA\r\nimport ctrader_open_api.messages.OpenApiModelMessages_pb2 as OAModel\r\nimport ctrader_open_api.messages.OpenApiCommonMessages_pb2 as OACommon\r\nimport ctrader_open_api.messages.OpenApiCommonModelMessages_pb2 as OAModelCommon\r\nfrom twisted.internet import reactor\r\n\r\n\r\n# connection, authentication and program lifecycle\r\nimport json\r\ncredentials = json.load(open('credentials.json'))\r\nclient = Client(EndPoints.PROTOBUF_DEMO_HOST, EndPoints.PROTOBUF_PORT, TcpProtocol)\r\ndef main():\r\n  print('ready to do something')\r\n  reactor.stop()\r\ndef onAccAuth(message):\r\n  print('account authenticated')\r\n  main()\r\ndef onAppAuth(message):\r\n  print('app authenticated')\r\n  req = OA.ProtoOAAccountAuthReq()\r\n  req.ctidTraderAccountId = credentials['accountId']\r\n  req.accessToken = credentials['accessToken']\r\n  deferred = client.send(req)\r\n  deferred.addCallbacks(onAccAuth, onError)\r\ndef onError(failure):\r\n  print('err: ', repr(failure.value))\r\ndef connected(client):\r\n  print('connected')\r\n  req = OA.ProtoOAApplicationAuthReq()\r\n  req.clientId = credentials['clientId']\r\n  req.clientSecret = credentials['clientSecret']\r\n  deferred = client.send(req, responseTimeoutInSeconds=20) # err if no response under 20 secs\r\n  deferred.addCallbacks(onAppAuth, onError)\r\ndef disconnected(client, reason):\r\n  print('disconnected: ', reason)\r\ndef onMsg(client, message):\r\n  ignores = [i.payloadType for i in [OACommon.ProtoHeartbeatEvent(), OA.ProtoOAAccountAuthRes(), OA.ProtoOAApplicationAuthRes()]]\r\n  if message.payloadType in ignores:\r\n    return\r\n  print('message received')\r\nclient.setConnectedCallback(connected)\r\nclient.setDisconnectedCallback(disconnected)\r\nclient.setMessageReceivedCallback(onMsg)\r\nclient.startService()\r\nreactor.run()\r\n\n"})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(6540);const o={},c=t.createContext(o);function s(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);