"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[764],{2467:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"examples/py-json-connect-getsyms","title":"Basic Python example of how to connect to server (JSON)","description":"This script does not use official package with Protobuf communication but rather","source":"@site/docs/06-examples/12-py-json-connect-getsyms.mdx","sourceDirName":"06-examples","slug":"/examples/py-json-connect-getsyms","permalink":"/ctoa/examples/py-json-connect-getsyms","draft":false,"unlisted":false,"editUrl":"https://github.com/m-ahmadi/ctoa/blob/main/docs/06-examples/12-py-json-connect-getsyms.mdx","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"What happened to the order you just sent","permalink":"/ctoa/examples/what-happened-to-the-order-you-just-sent"}}');var o=t(4848),a=t(8453);const i={},c="Basic Python example of how to connect to server (JSON)",r={},d=[{value:"How to set up stuff",id:"how-to-set-up-stuff",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"basic-python-example-of-how-to-connect-to-server-json",children:"Basic Python example of how to connect to server (JSON)"})}),"\n",(0,o.jsx)(n.p,{children:"This script does not use official package with Protobuf communication but rather\nuses JSON communication."}),"\n",(0,o.jsx)(n.p,{children:"Things to do before running the script:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"pip install websockets"})}),"\n",(0,o.jsxs)(n.li,{children:["put ",(0,o.jsx)(n.code,{children:"credentials.json"})," right beside the script"]}),"\n",(0,o.jsxs)(n.li,{children:["put ",(0,o.jsx)(n.code,{children:"payloadTypes.json"})," and ",(0,o.jsx)(n.code,{children:"OAModel.json"})," right beside the script (check\nbelow to see how to create them)"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import json\nimport asyncio as aio\nfrom websockets.asyncio.client import connect # pip install websockets\n\nreadjson = lambda path: json.load(open(path))\ncreds = readjson('./credentials.json')\npayloadTypes = readjson('./payloadTypes.json')\nOAModel = readjson('./OAModel.json')\n\n\n# set up a function for constructing client messages\nuid_counter = 0\ndef construct_client_msg(payloadType, fields={}):\n  global uid_counter\n  uid_counter += 1\n  client_msg = {\n    'clientMsgId': f'cm_id_{uid_counter}',\n    'payloadType': payloadTypes[payloadType],\n    'payload': {\n      'ctidTraderAccountId': creds['accountId'],\n      'accessToken': creds['accessToken'],\n      **fields\n    }\n  }\n  return json.dumps(client_msg)\n\n\nasync def main():\n  async with connect('wss://live.ctraderapi.com:5036') as ws:\n    print('Application authentication')\n    # we don't use the `construct_client_msg()` function for the first message,\n    # because its payload is different from the rest of the messages\n    client_msg = {\n      'clientMsgId': f'cm_id_{uid_counter}',\n      'payloadType': payloadTypes['PROTO_OA_APPLICATION_AUTH_REQ'],\n      'payload': {\n        'clientId': creds['clientId'],\n        'clientSecret': creds['clientSecret']\n      }\n    }\n    await ws.send(json.dumps(client_msg))\n    server_msg = json.loads(await ws.recv())\n    if server_msg['payloadType'] != payloadTypes['PROTO_OA_APPLICATION_AUTH_RES']:\n      print('Application authentication failed')\n\n    print('Account authentication')\n    client_msg = construct_client_msg('PROTO_OA_ACCOUNT_AUTH_REQ')\n    await ws.send(client_msg)\n    server_msg = json.loads(await ws.recv())\n    if server_msg['payloadType'] != payloadTypes['PROTO_OA_ACCOUNT_AUTH_RES']:\n      print('Account authentication failed')\n\n    print('Getting symbols list')\n    client_msg = construct_client_msg('PROTO_OA_SYMBOLS_LIST_REQ')\n    await ws.send(client_msg)\n    server_msg = json.loads(await ws.recv())\n    if server_msg['payloadType'] != payloadTypes['PROTO_OA_SYMBOLS_LIST_RES']:\n      print('Getting symbols failed')\n\n    print('Saving symbol list to file')\n    symbol_data = server_msg['payload']['symbol']\n    with open('symbols.json', 'w', encoding='utf-8') as f:\n      json.dump(symbol_data, f, ensure_ascii=False, indent=2)\n\naio.run(main())\n"})}),"\n",(0,o.jsx)(n.h2,{id:"how-to-set-up-stuff",children:"How to set up stuff"}),"\n",(0,o.jsxs)(n.p,{children:["In order to get the ",(0,o.jsx)(n.code,{children:"payloadTypes.json"})," and ",(0,o.jsx)(n.code,{children:"OAModel.json"})," files that were used\nin above script, you should run below snippet to create those files first.\nThings to do before running below snippet:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"pip install ctrader_open_api before"})," (we only need it once)"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import ctrader_open_api.messages.OpenApiModelMessages_pb2 as OAModel\nimport json\n\n# get payloadTypes\ntarget_keys = filter(lambda i: i.startswith('PROTO_OA_'), dir(OAModel))\nout = dict(map(lambda k: [k, getattr(OAModel, k)], target_keys))\nwith open('payloadTypes.json', 'w', encoding='utf-8') as f:\n  json.dump(out, f, ensure_ascii=False, indent=2)\n\n# get OAModel stuff\ntarget_keys = filter(lambda i: i.startswith('ProtoOA'), dir(OAModel))\nones_with_keyval = filter(lambda k: hasattr(getattr(OAModel,k),'keys'), target_keys)\nout = {}\nfor key in ones_with_keyval:\n  prop = getattr(OAModel, key)\n  out[key] = dict(zip(prop.keys(), prop.values()))\nwith open('OAModel.json', 'w', encoding='utf-8') as f:\n  json.dump(out, f, ensure_ascii=False, indent=2)\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(6540);const o={},a=s.createContext(o);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);