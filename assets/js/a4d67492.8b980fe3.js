"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[7190],{4087:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"examples/get-all-sym-configs","title":"Download All Symbol Configurations","description":"This script does not use official package with Protobuf communication but rather","source":"@site/docs/06-examples/17-get-all-sym-configs.mdx","sourceDirName":"06-examples","slug":"/examples/get-all-sym-configs","permalink":"/ctoa/examples/get-all-sym-configs","draft":false,"unlisted":false,"editUrl":"https://github.com/m-ahmadi/ctoa/blob/main/docs/06-examples/17-get-all-sym-configs.mdx","tags":[],"version":"current","sidebarPosition":17,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"What happened to the order you just sent","permalink":"/ctoa/examples/what-happened-to-the-order-you-just-sent"}}');var o=s(4848),i=s(8453);const a={},r="Download All Symbol Configurations",c={},l=[];function d(e){const n={a:"a",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"download-all-symbol-configurations",children:"Download All Symbol Configurations"})}),"\n",(0,o.jsx)(n.p,{children:"This script does not use official package with Protobuf communication but rather\nuses JSON communication."}),"\n",(0,o.jsx)(n.p,{children:"Things to do before running the script:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"pip install websockets"})}),"\n",(0,o.jsxs)(n.li,{children:["put ",(0,o.jsx)(n.code,{children:"credentials.json"})," right beside the script"]}),"\n",(0,o.jsxs)(n.li,{children:["put ",(0,o.jsx)(n.code,{children:"OAModel.custom.json"})," and ",(0,o.jsx)(n.code,{children:"payloadTypes.custom.json"})," right beside the\nscript. (check\n",(0,o.jsx)(n.a,{href:"./py-json-connect-getsyms-alt#how-to-get-the-json-definition-files",children:"here"})," to\nsee how to create them)"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import json\nimport asyncio as aio\nfrom types import SimpleNamespace\nimport sys\nfrom websockets.asyncio.client import connect # pip install websockets\n\n# utils\nparsejson = lambda s: json.loads(s, object_hook=lambda d: SimpleNamespace(**d))\ndef readfile(path):\n  with open(path) as f:\n    return parsejson(f.read())\ndef writejson(p, x):\n  with open(p, 'w', encoding='utf-8') as f:\n    json.dump(x, f, ensure_ascii=False, indent=2)\n\ncreds = readfile('./credentials.json')\noa = readfile('./OAModel.custom.json')\npt = readfile('./payloadTypes.custom.json')\n\n\n# set up a function for constructing client messages\nuid_counter = 0\ndef mk_msg(payloadType, fields={}):\n  global uid_counter\n  uid_counter += 1\n  client_msg = {\n    'clientMsgId': f'cm_id_{uid_counter}',\n    'payloadType': payloadType,\n    'payload': {\n      'ctidTraderAccountId': creds.accountId,\n      'accessToken': creds.accessToken,\n      **fields\n    }\n  }\n  return json.dumps(client_msg)\n\nasync def main():\n  async with connect('wss://live.ctraderapi.com:5036') as ws:\n    print('auth app')\n    req = {'payloadType': pt.req.ApplicationAuth, 'payload':\n\t\t\t{'clientId': creds.clientId,'clientSecret': creds.clientSecret}}\n    await ws.send(json.dumps(req))\n    res = parsejson(await ws.recv())\n    if res.payloadType != pt.res.ApplicationAuth:\n      raise Exception('auth app failed')\n\n    print('auth account')\n    await ws.send(mk_msg(pt.req.AccountAuth))\n    res = parsejson(await ws.recv())\n    if res.payloadType != pt.res.AccountAuth:\n      raise Exception('auth account failed')\n\n    print('SymbolsList')\n    await ws.send(mk_msg(pt.req.SymbolsList))\n    res = parsejson(await ws.recv())\n    if res.payloadType != pt.res.SymbolsList:\n      raise Exception('SymbolsList failed')\n    symbols = [sym.__dict__ for sym in res.payload.symbol]\n\n    print('Getting symbol entities...')\n    symbol_entities = []\n    progress = 0\n    progress_total = len(symbols)\n    for symbol in symbols:\n      id = symbol['symbolId']\n      await ws.send(mk_msg(pt.req.SymbolById, {'symbolId': id}))\n      res = json.loads(await ws.recv())\n      symbol_entity = res['payload']['symbol'][0]\n      symbol_entities.append(symbol_entity)\n      progress += 1\n      sys.stdout.write(f'\\r{progress}/{progress_total}')\n\n    writejson('symbols.json', symbols)\n    writejson('symbol_entities.json', symbol_entities)\n\naio.run(main())\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var t=s(6540);const o={},i=t.createContext(o);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);