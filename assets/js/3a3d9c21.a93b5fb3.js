"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[185],{1462:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"examples/py-get-historical-candles","title":"Python example of how to download time-series data","description":"https://t.me/ctraderopenapi_support/5836","source":"@site/docs/06-examples/03-py-get-historical-candles.mdx","sourceDirName":"06-examples","slug":"/examples/py-get-historical-candles","permalink":"/ctoa/examples/py-get-historical-candles","draft":false,"unlisted":false,"editUrl":"https://github.com/m-ahmadi/ctoa/blob/main/docs/06-examples/03-py-get-historical-candles.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Python example of connecting to server and placing an order","permalink":"/ctoa/examples/py-connect-place-order"},"next":{"title":"Python example of how to download ticks data","permalink":"/ctoa/examples/py-get-historical-ticks"}}');var o=t(4848),a=t(8453);const s={},i="Python example of how to download time-series data",d={},p=[{value:"Basic",id:"basic",level:2},{value:"Beginner-level multi-requesting",id:"beginner-level-multi-requesting",level:2}];function c(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"python-example-of-how-to-download-time-series-data",children:"Python example of how to download time-series data"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://t.me/ctrader_open_api_support/5836",children:"https://t.me/ctrader_open_api_support/5836"}),(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.a,{href:"https://t.me/ctrader_open_api_support/5936",children:"https://t.me/ctrader_open_api_support/5936"})]}),"\n",(0,o.jsx)(n.h2,{id:"basic",children:"Basic"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"import datetime as dt\nimport json\nimport pandas as pd\nfrom ctrader_open_api import Client, Protobuf, TcpProtocol, EndPoints\nimport ctrader_open_api.messages.OpenApiMessages_pb2 as OA\nimport ctrader_open_api.messages.OpenApiModelMessages_pb2 as OAModel\nimport ctrader_open_api.messages.OpenApiCommonMessages_pb2 as OACommon\nimport ctrader_open_api.messages.OpenApiCommonModelMessages_pb2 as OAModelCommon\nfrom twisted.internet import reactor\nPROTO_OA_ERROR_RES_PAYLOAD_TYPE = OA.ProtoOAErrorRes().payloadType\n\n# connection, authentication and program lifecycle\ncredentials = json.load(open('credentials.json'))\nclient = Client(EndPoints.PROTOBUF_DEMO_HOST, EndPoints.PROTOBUF_PORT, TcpProtocol)\ndef onAccAuth(message):\n  if message.payloadType == PROTO_OA_ERROR_RES_PAYLOAD_TYPE:\n    print('account authentication failed', '\\n')\n    print(Protobuf.extract(message), '\\n')\n    return\n  print('account authenticated')\n  main()\ndef onAppAuth(message):\n  if message.payloadType == PROTO_OA_ERROR_RES_PAYLOAD_TYPE:\n    print('app authentication failed', '\\n')\n    print(Protobuf.extract(message), '\\n')\n    return\n  print('app authenticated')\n  req = OA.ProtoOAAccountAuthReq()\n  req.ctidTraderAccountId = credentials['accountId']\n  req.accessToken = credentials['accessToken']\n  deferred = client.send(req)\n  deferred.addCallbacks(onAccAuth, onError)\ndef onError(failure):\n  print('err: ', repr(failure.value))\ndef connected(client):\n  print('connected')\n  req = OA.ProtoOAApplicationAuthReq()\n  req.clientId = credentials['clientId']\n  req.clientSecret = credentials['clientSecret']\n  deferred = client.send(req, responseTimeoutInSeconds=20) # err if no response under 20 secs\n  deferred.addCallbacks(onAppAuth, onError)\ndef disconnected(client, reason):\n  print('disconnected: ', reason)\ndef onMsg(client, message):\n  ignores = [i.payloadType for i in [OACommon.ProtoHeartbeatEvent(), OA.ProtoOAAccountAuthRes(), OA.ProtoOAApplicationAuthRes()]]\n  if message.payloadType in ignores:\n    return\n  print('message received')\n\n# get historical daily bars\ndef onTrendbar(message):\n  response = Protobuf.extract(message)\n  if message.payloadType == OA.ProtoOAErrorRes().payloadType:\n    print(response)\n    return\n  bars = []\n  for bar in response.trendbar:\n    timestamp = bar.utcTimestampInMinutes * 60 # seconds\n    open = (bar.low + bar.deltaOpen) / 100000.0\n    high = (bar.low + bar.deltaHigh) / 100000.0\n    low = bar.low / 100000.0\n    close = (bar.low + bar.deltaClose) / 100000.0\n    bars.append([timestamp, open, high, low, close, bar.volume])\n  pd.DataFrame(bars, columns=['timestamp','open','high','low','close','volume']).to_csv('bars.csv', index=False)\n  bars_df = pd.read_csv('bars.csv', index_col='timestamp')\n  bars_df.index = pd.to_datetime(bars_df.index, unit='s', utc=True) # optional\ndef main():\n  req = OA.ProtoOAGetTrendbarsReq()\n  req.symbolId = 41 # 'XAUUSD'\n  req.ctidTraderAccountId = credentials['accountId']\n  req.period = OAModel.ProtoOATrendbarPeriod.D1\n  req.fromTimestamp = int(dt.datetime(2025,1,1, tzinfo=dt.UTC).timestamp()) * 1000\n  req.toTimestamp = int(dt.datetime(2025,1,23, tzinfo=dt.UTC).timestamp()) * 1000\n  deferred = client.send(req)\n  deferred.addCallbacks(onTrendbar, onError)\n\nclient.setConnectedCallback(connected)\nclient.setDisconnectedCallback(disconnected)\nclient.setMessageReceivedCallback(onMsg)\nclient.startService()\nreactor.run()\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"beginner-level-multi-requesting",children:"Beginner-level multi-requesting"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"# get full timeseries data\nimport datetime as dt\nimport json\nimport os\nfrom timeit import default_timer as timer\nimport pandas as pd\nCHUNK_SIZE = {'days': 1} # span covered in 1 request\nTHRESHOLD_OF_EMPTY_RESPONSES = 60 # cutoff logic\noutfile = 'bars.raw.csv'\nstatefile = 'last_fromTimestamp.txt'\ncols = ['utcTimestampInMinutes','low','deltaOpen','deltaClose','deltaHigh','volume']\nrequest_timer = 0 # for measuring time taken by requests\nempty_resp_counter = 0 # for counting sequantial empty responses\ndef main():\n  sym_id = 41 # 'XAUUSD'\n  start, end = None, None\n  if os.path.exists(statefile):\n    with open(statefile) as f:\n      last_saved_fromTimestamp = f.read()\n    last_fromDatetime = dt.datetime.fromtimestamp(int(last_saved_fromTimestamp)/1000)\n    # date range must not be redundant between runs (otherwise creates duplicates in outfile)\n    start = last_fromDatetime - dt.timedelta(**CHUNK_SIZE)\n    end = last_fromDatetime\n  else:\n    now = dt.datetime.now(tz=dt.UTC)\n    today_midnight = now.replace(hour=0, minute=0, second=0, microsecond=0)\n    start = today_midnight - dt.timedelta(**CHUNK_SIZE)\n    end = today_midnight\n  fr, to = [int(i.timestamp()*1000) for i in [start, end]]\n  reqBars(sym_id, fr, to)\n  print('FROM:                           TO:                             SECS_TOOK:      BARS:')\n\ndef reqBars(sym_id, fr, to):\n  req = OA.ProtoOAGetTrendbarsReq()\n  req.symbolId = sym_id\n  req.ctidTraderAccountId = credentials['accountId']\n  req.period = OAModel.ProtoOATrendbarPeriod.M1\n  req.fromTimestamp = fr\n  req.toTimestamp = to\n  deferred = client.send(req, responseTimeoutInSeconds=20)\n  deferred.addCallbacks(onTrendbar, onError, [fr, to])\n  global request_timer\n  request_timer = timer()\n\ndef onTrendbar(message, begin, end):\n  response = Protobuf.extract(message)\n  # print some stuff about the chunk\n  global request_timer\n  chunk_info = [\n    *[dt.datetime.fromtimestamp(i/1000) for i in [begin,end]],\n    round((timer()-request_timer)),\n    len(response.trendbar),\n  ]\n  print('\\t\\t'.join(map(str,chunk_info)))\n  if message.payloadType == OA.ProtoOAErrorRes().payloadType:\n    print('server sent error')\n  # process chunk response\n  if len(response.trendbar) > 0:\n    chunk_bars = [[str(getattr(i,k)) for k in cols] for i in response.trendbar]\n    chunk_str = '\\n'.join([','.join(i) for i in chunk_bars]) + '\\n'\n    with open(outfile, 'a', newline='') as f: f.write(chunk_str)\n  # update state file\n  with open(statefile, 'w') as f: f.write(str(begin))\n  # count up empty server responses (used to detect when reached end of data)\n  global empty_resp_counter\n  empty_resp_counter = 0 if len(response.trendbar) > 0 else (empty_resp_counter + 1)\n  # assume we reached end of data if last n requests had no data\n  if empty_resp_counter > THRESHOLD_OF_EMPTY_RESPONSES:\n    df = pd.read_csv(outfile, names=cols)\n    df2 = pd.DataFrame()\n    df2['timestamp'] = df['utcTimestampInMinutes'] * 60\n    df2['open'] = (df['low'] + df['deltaOpen']) / 100_000\n    df2['high'] = (df['low'] + df['deltaHigh']) / 100_000\n    df2['low'] = df['low'] / 100_000\n    df2['close'] = (df['low'] + df['deltaClose']) / 100_000\n    df2['volume'] = df['volume']\n    df2.sort_values(by='timestamp', ascending=True, inplace=True)\n    df2.to_csv('bars.csv', index=False)\n    print('all done. shutting down...')\n    reactor.stop()\n    return\n  # request next chunk\n  prev_frm = dt.datetime.fromtimestamp(begin / 1000)\n  new_frm = prev_frm - dt.timedelta(**CHUNK_SIZE)\n  fr, to = [int(i.timestamp()*1000) for i in [new_frm, prev_frm]]\n  reqBars(response.symbolId, fr, to)\n\n"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(6540);const o={},a=r.createContext(o);function s(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);