"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[2],{6401:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"examples/Python example of connecting to server and placing an order","title":"Python example of connecting to server and placing an order","description":"","source":"@site/docs/06-examples/02-Python example of connecting to server and placing an order.mdx","sourceDirName":"06-examples","slug":"/examples/Python example of connecting to server and placing an order","permalink":"/ctoa/examples/Python example of connecting to server and placing an order","draft":false,"unlisted":false,"editUrl":"https://github.com/m-ahmadi/ctoa/blob/main/docs/06-examples/02-Python example of connecting to server and placing an order.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Basic Python examples of how to connect to server","permalink":"/ctoa/examples/Basic Python examples of how to connect to server"},"next":{"title":"Python example of how to download time-series data","permalink":"/ctoa/examples/Python example of how to download time-series data"}}');var r=o(4848),a=o(8453);const s={},c=void 0,i={},d=[];function p(e){const n={code:"code",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"from ctrader_open_api import Client, Protobuf, TcpProtocol, EndPoints\nimport ctrader_open_api.messages.OpenApiMessages_pb2 as OA\nimport ctrader_open_api.messages.OpenApiModelMessages_pb2 as OAModel\nimport ctrader_open_api.messages.OpenApiCommonMessages_pb2 as OACommon\nimport ctrader_open_api.messages.OpenApiCommonModelMessages_pb2 as OAModelCommon\nfrom twisted.internet import reactor\nimport json\n\ncredentials = json.load(open('credentials.json'))\nclient = Client(EndPoints.PROTOBUF_DEMO_HOST, EndPoints.PROTOBUF_PORT, TcpProtocol)\nPROTO_OA_ERROR_RES_PAYLOAD_TYPE = OA.ProtoOAErrorRes().payloadType\n\ndef main():\n  req = OA.ProtoOANewOrderReq()\n  req.ctidTraderAccountId = credentials['accountId']\n  req.orderType = OAModel.ProtoOAOrderType.LIMIT\n  req.tradeSide = OAModel.ProtoOATradeSide.BUY\n  req.symbolId = 41 # XAUUSD\n  req.limitPrice = 2700.34\n  req.volume = 100 # equals 0.01 lot\n  req.stopLoss = 2600.34\n  req.takeProfit = 2750.34\n  deferred = client.send(req)\n  deferred.addCallbacks(onNewOrderRes, onError)\n\ndef onNewOrderRes(message):\n  if message.payloadType != OA.ProtoOAExecutionEvent().payloadType:\n    print('order not placed')\n    return\n  response = Protobuf.extract(message)\n  print('order successfully placed');\n  print('order id:', response.order.orderId)\n\ndef onAccAuth(message):\n  if message.payloadType == PROTO_OA_ERROR_RES_PAYLOAD_TYPE:\n    print('account authentication failed', '\\n')\n    print(Protobuf.extract(message), '\\n')\n    return\n  print('account authenticated')\n  main()\n\ndef onAppAuth(message):\n  if message.payloadType == PROTO_OA_ERROR_RES_PAYLOAD_TYPE:\n    print('app authentication failed', '\\n')\n    print(Protobuf.extract(message), '\\n')\n    return\n  print('app authenticated')\n  req = OA.ProtoOAAccountAuthReq()\n  req.ctidTraderAccountId = credentials['accountId']\n  req.accessToken = credentials['accessToken']\n  deferred = client.send(req)\n  deferred.addCallbacks(onAccAuth, onError)\n\ndef onError(failure):\n  print('err: ', repr(failure.value))\n\ndef connected(client):\n  print('connected')\n  req = OA.ProtoOAApplicationAuthReq()\n  req.clientId = credentials['clientId']\n  req.clientSecret = credentials['clientSecret']\n  deferred = client.send(req, responseTimeoutInSeconds=20) # err if no response under 20 secs\n  deferred.addCallbacks(onAppAuth, onError)\n\ndef disconnected(client, reason):\n  print('disconnected: ', reason)\n\ndef onMsg(client, message):\n  ignores = [i.payloadType for i in [OACommon.ProtoHeartbeatEvent(), OA.ProtoOAAccountAuthRes(), OA.ProtoOAApplicationAuthRes()]]\n  if message.payloadType in ignores:\n    return\n  print('message received')\n\nclient.setConnectedCallback(connected)\nclient.setDisconnectedCallback(disconnected)\nclient.setMessageReceivedCallback(onMsg)\nclient.startService()\nreactor.run()\n\n"})})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>c});var t=o(6540);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);