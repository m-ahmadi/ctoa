"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[5315],{2943:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"examples/py-subscribe-to-live-data","title":"Python example of how to subscribe for data","description":"Sensitive data stored in .env file.","source":"@site/docs/06-examples/05-py-subscribe-to-live-data.mdx","sourceDirName":"06-examples","slug":"/examples/py-subscribe-to-live-data","permalink":"/ctoa/examples/py-subscribe-to-live-data","draft":false,"unlisted":false,"editUrl":"https://github.com/m-ahmadi/ctoa/blob/main/docs/06-examples/05-py-subscribe-to-live-data.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Python example of how to download ticks data","permalink":"/ctoa/examples/py-get-historical-ticks"},"next":{"title":"How far back data, you can download","permalink":"/ctoa/examples/history-depth"}}');var s=t(4848),r=t(8453);const a={},c="Python example of how to subscribe for data",i={},d=[];function l(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"python-example-of-how-to-subscribe-for-data",children:"Python example of how to subscribe for data"})}),"\n",(0,s.jsx)(n.p,{children:"Sensitive data stored in .env file."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://t.me/ctrader_open_api_support/8932",children:"https://t.me/ctrader_open_api_support/8932"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from ctrader_open_api import Client, Protobuf, TcpProtocol, EndPoints\nimport ctrader_open_api.messages.OpenApiMessages_pb2 as OA\nimport os\nfrom twisted.internet import reactor\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\ncredentials = {\n  "clientId": os.getenv("CLIENT_ID"),\n  "clientSecret": os.getenv("CLIENT_SECRET"),\n  "accessToken": os.getenv("ACCESS_TOKEN"),\n  "accountId": int(os.getenv("ACCOUNT_ID"))\n}\n\nclient = Client(EndPoints.PROTOBUF_LIVE_HOST, EndPoints.PROTOBUF_PORT, TcpProtocol)\nPROTO_OA_ERROR_RES_PAYLOAD_TYPE = OA.ProtoOAErrorRes().payloadType\n\ntickers = ["EURUSD", "XAUUSD", "USDCNH", "XAGUSD"]\nsymbol_ids = {}\n\n\ndef onAccAuth(message):\n  if message.payloadType == PROTO_OA_ERROR_RES_PAYLOAD_TYPE:\n    print("Account authentication failed:", Protobuf.extract(message))\n    reactor.stop()\n    return\n  print("Account authenticated")\n  print("Requesting symbol list...")\n  req = OA.ProtoOASymbolsListReq()\n  req.ctidTraderAccountId = credentials["accountId"]\n  deferred = client.send(req)\n  deferred.addCallbacks(onSymbolsList, onError)\n\n\ndef onSymbolsList(message):\n  response = Protobuf.extract(message)\n  print("Symbols received")\n  for symbol in response.symbol:\n    if symbol.symbolName in tickers:\n      symbol_ids[symbol.symbolName] = symbol.symbolId\n      print(f"{symbol.symbolName} -> SymbolID {symbol.symbolId}")\n  subscribeToPrices()\n\n\ndef subscribeToPrices():\n  print("Subscribing to price streams...")\n  req = OA.ProtoOASubscribeSpotsReq()\n  req.ctidTraderAccountId = credentials["accountId"]\n  # Setup ID list\n  req.symbolId.extend(symbol_ids.values())\n  client.send(req)\n\n\ndef onMsg(client, message):\n  if message.payloadType == OA.ProtoOASpotEvent().payloadType:\n    response = Protobuf.extract(message)\n    symbolName = next((n for n, sid in symbol_ids.items() if sid == response.symbolId), str(response.symbolId))\n    print(f"Price update: {symbolName} Bid {response.bid} Ask {response.ask}")\n\n\ndef onAppAuth(message):\n  if message.payloadType == PROTO_OA_ERROR_RES_PAYLOAD_TYPE:\n    print("App authentication failed:", Protobuf.extract(message))\n    reactor.stop()\n    return\n  print("App authenticated")\n  req = OA.ProtoOAAccountAuthReq()\n  req.ctidTraderAccountId = credentials["accountId"]\n  req.accessToken = credentials["accessToken"]\n  deferred = client.send(req)\n  deferred.addCallbacks(onAccAuth, onError)\n\n\ndef onError(failure):\n  print("Error:", repr(failure.value))\n  reactor.stop()\n\n\ndef connected(client):\n  print("Connected")\n  req = OA.ProtoOAApplicationAuthReq()\n  req.clientId = credentials["clientId"]\n  req.clientSecret = credentials["clientSecret"]\n  deferred = client.send(req, responseTimeoutInSeconds=20)\n  deferred.addCallbacks(onAppAuth, onError)\n\n\ndef disconnected(client, reason):\n  print("Disconnected:", reason)\n  reactor.stop()\n\n\nclient.setConnectedCallback(connected)\nclient.setDisconnectedCallback(disconnected)\nclient.setMessageReceivedCallback(onMsg)\nclient.startService()\nreactor.run()\n\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var o=t(6540);const s={},r=o.createContext(s);function a(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);