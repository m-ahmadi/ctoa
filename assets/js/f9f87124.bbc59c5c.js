"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[5056],{2788:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"examples/py-json-connect-getsyms","title":"Basic Python example of how to connect to server (JSON)","description":"This script does not use official package with Protobuf communication but rather","source":"@site/docs/06-examples/07-py-json-connect-getsyms.mdx","sourceDirName":"06-examples","slug":"/examples/py-json-connect-getsyms","permalink":"/ctoa/examples/py-json-connect-getsyms","draft":false,"unlisted":false,"editUrl":"https://github.com/m-ahmadi/ctoa/blob/main/docs/06-examples/07-py-json-connect-getsyms.mdx","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"How far back data, you can download","permalink":"/ctoa/examples/history-depth"},"next":{"title":"Basic Python example of how to connect to server (JSON, Alt Naming)","permalink":"/ctoa/examples/py-json-connect-getsyms-alt"}}');var s=t(4848),i=t(8453);const a={},c="Basic Python example of how to connect to server (JSON)",r={},l=[{value:"How to get the JSON definition files.",id:"how-to-get-the-json-definition-files",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"basic-python-example-of-how-to-connect-to-server-json",children:"Basic Python example of how to connect to server (JSON)"})}),"\n",(0,s.jsx)(n.p,{children:"This script does not use official package with Protobuf communication but rather\nuses JSON communication."}),"\n",(0,s.jsx)(n.p,{children:"Things to do before running the script:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"pip install websockets"})}),"\n",(0,s.jsxs)(n.li,{children:["put ",(0,s.jsx)(n.code,{children:"credentials.json"})," right beside the script"]}),"\n",(0,s.jsxs)(n.li,{children:["put ",(0,s.jsx)(n.code,{children:"OAModel.json"})," right beside the script (check below to see how to create\nit)"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import json\nimport asyncio as aio\nfrom websockets.asyncio.client import connect # pip install websockets\n\nreadjson = lambda path: json.load(open(path))\ncreds = readjson('./credentials.json')\nOAModel = readjson('./OAModel.json')\npayloadTypes = OAModel['ProtoOAPayloadType']\n\n\n# set up a function for constructing client messages\nuid_counter = 0\ndef construct_client_msg(payloadType, fields={}):\n  global uid_counter\n  uid_counter += 1\n  client_msg = {\n    'clientMsgId': f'cm_id_{uid_counter}',\n    'payloadType': payloadTypes[payloadType],\n    'payload': {\n      'ctidTraderAccountId': creds['accountId'],\n      'accessToken': creds['accessToken'],\n      **fields\n    }\n  }\n  return json.dumps(client_msg)\n\n\nasync def main():\n  async with connect('wss://live.ctraderapi.com:5036') as ws:\n    print('Application authentication')\n    # we don't use the `construct_client_msg()` function for the first message,\n    # because its payload is different from the rest of the messages\n    client_msg = {\n      'clientMsgId': f'cm_id_{uid_counter}',\n      'payloadType': payloadTypes['PROTO_OA_APPLICATION_AUTH_REQ'],\n      'payload': {\n        'clientId': creds['clientId'],\n        'clientSecret': creds['clientSecret']\n      }\n    }\n    await ws.send(json.dumps(client_msg))\n    server_msg = json.loads(await ws.recv())\n    if server_msg['payloadType'] != payloadTypes['PROTO_OA_APPLICATION_AUTH_RES']:\n      print('Application authentication failed')\n\n    print('Account authentication')\n    client_msg = construct_client_msg('PROTO_OA_ACCOUNT_AUTH_REQ')\n    await ws.send(client_msg)\n    server_msg = json.loads(await ws.recv())\n    if server_msg['payloadType'] != payloadTypes['PROTO_OA_ACCOUNT_AUTH_RES']:\n      print('Account authentication failed')\n\n    print('Getting symbols list')\n    client_msg = construct_client_msg('PROTO_OA_SYMBOLS_LIST_REQ')\n    await ws.send(client_msg)\n    server_msg = json.loads(await ws.recv())\n    if server_msg['payloadType'] != payloadTypes['PROTO_OA_SYMBOLS_LIST_RES']:\n      print('Getting symbols failed')\n\n    print('Saving symbol list to file')\n    symbol_data = server_msg['payload']['symbol']\n    with open('symbols.json', 'w', encoding='utf-8') as f:\n      json.dump(symbol_data, f, ensure_ascii=False, indent=2)\n\naio.run(main())\n"})}),"\n",(0,s.jsx)(n.h2,{id:"how-to-get-the-json-definition-files",children:"How to get the JSON definition files."}),"\n",(0,s.jsxs)(n.p,{children:["Run below snippet to create the ",(0,s.jsx)(n.code,{children:"OAModel.json"})," file. Before running the snippet\nyou need to have cTrader OpenAPI Python package installed:\n",(0,s.jsx)(n.code,{children:"pip install ctrader_open_api"})]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["When using ",(0,s.jsx)(n.code,{children:"JSON"})," communication, we don't need the ",(0,s.jsx)(n.code,{children:"ctrader_open_api"})," package\nanymore. We're only installing it to extract the neccessary information into the\n",(0,s.jsx)(n.code,{children:"OAModel.json"})," file and we no longer need it afterwards so we can uninstall it\nwith ",(0,s.jsx)(n.code,{children:"pip uninstall ctrader_open_api -y"})," after we ran the snippet."]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import ctrader_open_api.messages.OpenApiModelMessages_pb2 as OAModel\nimport json\n\n# extract info\ntarget_keys = filter(lambda i: i.startswith('ProtoOA'), dir(OAModel))\nones_with_keyval = filter(lambda k: hasattr(getattr(OAModel,k),'keys'), target_keys)\nout = {}\nfor key in ones_with_keyval:\n  prop = getattr(OAModel, key)\n  out[key] = dict(zip(prop.keys(), prop.values()))\n\n# write to file\nwith open('OAModel.json', 'w', encoding='utf-8') as f:\n  json.dump(out, f, ensure_ascii=False, indent=2)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var o=t(6540);const s={},i=o.createContext(s);function a(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);