"use strict";(self.webpackChunkctrader_openapi_docs=self.webpackChunkctrader_openapi_docs||[]).push([[910],{4562:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"examples/py-get-historical-ticks","title":"Python example of how to download ticks data","description":"","source":"@site/docs/06-examples/04-py-get-historical-ticks.mdx","sourceDirName":"06-examples","slug":"/examples/py-get-historical-ticks","permalink":"/ctoa/examples/py-get-historical-ticks","draft":false,"unlisted":false,"editUrl":"https://github.com/m-ahmadi/ctoa/blob/main/docs/06-examples/04-py-get-historical-ticks.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Python example of how to download time-series data","permalink":"/ctoa/examples/py-get-historical-candles"},"next":{"title":"Basic websocket example in JavaScript","permalink":"/ctoa/examples/js-websockt-basics"}}');var a=n(4848),r=n(8453);const i={},s="Python example of how to download ticks data",c={},d=[];function p(e){const t={code:"code",h1:"h1",header:"header",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"python-example-of-how-to-download-ticks-data",children:"Python example of how to download ticks data"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-py",children:"import datetime as dt\nimport json\nimport os\nfrom ctrader_open_api import Client, Protobuf, TcpProtocol, EndPoints\nimport ctrader_open_api.messages.OpenApiMessages_pb2 as OA\nimport ctrader_open_api.messages.OpenApiModelMessages_pb2 as OAModel\nimport ctrader_open_api.messages.OpenApiCommonMessages_pb2 as OACommon\nimport ctrader_open_api.messages.OpenApiCommonModelMessages_pb2 as OAModelCommon\nfrom twisted.internet import reactor\nPROTO_OA_ERROR_RES_PAYLOAD_TYPE = OA.ProtoOAErrorRes().payloadType\n\n# connection, authentication and program lifecycle\ncredentials = json.load(open('credentials.json'))\nclient = Client(EndPoints.PROTOBUF_DEMO_HOST, EndPoints.PROTOBUF_PORT, TcpProtocol)\ndef onAccAuth(message):\n\tif message.payloadType == PROTO_OA_ERROR_RES_PAYLOAD_TYPE:\n\t\tprint('account authentication failed', '\\n')\n\t\tprint(Protobuf.extract(message), '\\n')\n\t\treturn\n\tprint('account authenticated')\n\tmain()\ndef onAppAuth(message):\n\tif message.payloadType == PROTO_OA_ERROR_RES_PAYLOAD_TYPE:\n\t\tprint('app authentication failed', '\\n')\n\t\tprint(Protobuf.extract(message), '\\n')\n\t\treturn\n\tprint('app authenticated')\n\treq = OA.ProtoOAAccountAuthReq()\n\treq.ctidTraderAccountId = credentials['accountId']\n\treq.accessToken = credentials['accessToken']\n\tdeferred = client.send(req)\n\tdeferred.addCallbacks(onAccAuth, onError)\ndef onError(failure):\n\tprint('err: ', repr(failure.value))\ndef connected(client):\n\tprint('connected')\n\treq = OA.ProtoOAApplicationAuthReq()\n\treq.clientId = credentials['clientId']\n\treq.clientSecret = credentials['clientSecret']\n\tdeferred = client.send(req, responseTimeoutInSeconds=20) # err if no response under 20 secs\n\tdeferred.addCallbacks(onAppAuth, onError)\ndef disconnected(client, reason):\n\tprint('disconnected: ', reason)\ndef onMsg(client, message):\n\tignores = [i.payloadType for i in [OACommon.ProtoHeartbeatEvent(), OA.ProtoOAAccountAuthRes(), OA.ProtoOAApplicationAuthRes()]]\n\tif message.payloadType in ignores:\n\t\treturn\n\tprint('message received')\n\n\n# getting tick data\ndef onTickData(message):\n\tresponse = Protobuf.extract(message)\n\tif message.payloadType == OA.ProtoOAErrorRes().payloadType:\n\t\tprint('server sent error')\n\t\tprint(response)\n\t\treturn\n\tif response.hasMore:\n\t\tprint('time range specified contains more ticks than allowed per request')\n\ttickData = response.tickData\n\tif not len(tickData):\n\t\tprint('there were no ticks in the date range you specified')\n\n\tticks = []\n\tprev_timestamp = tickData[0].timestamp\n\tprev_tick = tickData[0].tick\n\tfor i, v in enumerate(tickData):\n\t\ttimestamp = prev_timestamp + v.timestamp if i > 0 else v.timestamp\n\t\ttick = prev_tick + v.tick if i > 0 else v.tick\n\t\ttick_normalized = tick / 100_000\n\t\tticks.append(map(str, [timestamp, tick_normalized]))\n\t\tprev_timestamp, prev_tick = timestamp, tick\n\n\tprint(ticks)\n\ndef main():\n\tfor file in ['ticks.bid.csv', 'ticks.ask.csv']:\n\t\tif os.path.exists(file): os.remove(file)\n\tsym_id = 41 # 'XAUUSD'\n\n\tdatetime_range = [(2025,1,2,18,30), (2025,1,2,18,45)]\n\tfrm, to = [dt.datetime(*i, tzinfo=dt.UTC).timestamp() for i in datetime_range]\n\n\tif to - frm > dt.timedelta(weeks=1).total_seconds():\n\t\traise ValueError('cannot request tick data for a period larger than one week!')\n\n\treq = OA.ProtoOAGetTickDataReq()\n\treq.symbolId = sym_id\n\treq.ctidTraderAccountId = credentials['accountId']\n\treq.type = OAModel.ProtoOAQuoteType.BID # or it can be `OAModel.ProtoOAQuoteType.ASK`\n\treq.fromTimestamp = int(frm * 1000)\n\treq.toTimestamp = int(to * 1000)\n\n\tdeferred = client.send(req, responseTimeoutInSeconds=20)\n\tdeferred.addCallbacks(onTickData, onError)\n\nclient.setConnectedCallback(connected)\nclient.setDisconnectedCallback(disconnected)\nclient.setMessageReceivedCallback(onMsg)\nclient.startService()\nreactor.run()\n\n"})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var o=n(6540);const a={},r=o.createContext(a);function i(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);